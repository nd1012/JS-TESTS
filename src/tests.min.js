class TestResults{#Types=new Map;#TestResults=new Map;#Assertions=0;#Tests=0;#Runtime=null;#LastError=null;get Types(){return this.#Types}get TestResults(){return this.#TestResults}get Assertions(){return this.#Assertions}set Assertions(a){this.#Assertions=a}get Tests(){return this.#Tests}set Tests(a){this.#Tests=a}get Runtime(){return this.#Runtime}set Runtime(a){this.#Runtime=a}get LastError(){return this.#LastError}set LastError(a){this.#LastError=a}constructor(a=0,b=0,c=0,d=null){this.#Assertions=a,this.#Tests=b,this.#Runtime=c,this.#LastError=d}}/**
 * JavaScript tests base class
 * 
 * @github https://github.com/nd1012/JS-TESTS
 * @license MIT
 * @copyright (c)2022 Andreas Zimmermann, wan24.de
 */class Tests extends TestResults{#CurrentTest=null;#TestAssertions=0;#Benchmarks=new Map;#IsTestsFailTest=!1;get TestMethods(){return Object.getOwnPropertyNames(Object.getPrototypeOf(this))}get Benchmarks(){return this.#Benchmarks}get _IsTestsFailtest(){return this.#IsTestsFailTest}Catch(a){try{return a()}catch(a){console.groupEnd(),console.error("Test code exception catched",a);debugger;throw a}}async CatchAsync(a){try{return await a()}catch(a){console.groupEnd(),console.error("Test code exception catched",a);debugger;throw a}}Assert(a){if(this.Assertions++,this.#TestAssertions++,!a){if(!this._IsTestsFailtest){console.groupEnd();debugger}throw new AssertionError("Assertion failed at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,!0,!1)}return this}AssertEqual(c,a,b=!1){if(this.Assertions++,this.#TestAssertions++,b?c!==a:c!=a){if(this._IsTestsFailtest||console.groupEnd(),console.warn(c,a,b),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,c,a)}return this}AssertNotEqual(c,a,b=!1){if(this.Assertions++,this.#TestAssertions++,b?c===a:c==a){if(this._IsTestsFailtest||console.groupEnd(),console.warn(c,a,b),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,void 0,a)}return this}AssertType(a,b){if(this.Assertions++,this.#TestAssertions++,"string"==typeof b?typeof a!=b:!(a instanceof b)){if(this._IsTestsFailtest||console.groupEnd(),console.warn(a,b),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,a,b)}return this}AssertNotType(a,b){if(this.Assertions++,this.#TestAssertions++,"string"==typeof b?typeof a==b:a instanceof b){if(this._IsTestsFailtest||console.groupEnd(),console.warn(a,b),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,void 0,a)}return this}AssertException(a,b=null){this.Assertions++;try{a();debugger;throw new AssertionError("Assertion failed (exception not thrown) at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,b,void 0)}catch(a){if(b&&!(a instanceof b)){if(this._IsTestsFailtest||console.groupEnd(),console.warn(a),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed (exception type mismatch) at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,b,a)}}return this}async AssertExceptionAsync(a,b=null){this.Assertions++;try{await a();debugger;throw new AssertionError("Assertion failed (exception not thrown) at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,b,void 0)}catch(a){if(b&&!(a instanceof b)){if(this._IsTestsFailtest||console.groupEnd(),console.warn(a),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed (exception type mismatch) at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,b,a)}}return this}AssertNoException(a){this.Assertions++;try{return a()}catch(a){if(this._IsTestsFailtest||console.groupEnd(),console.warn(a),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed (unexpected exception) at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,null,a)}}async AssertNoExceptionAsync(a){this.Assertions++;try{return await a()}catch(a){if(this._IsTestsFailtest||console.groupEnd(),console.warn(a),!this._IsTestsFailtest)debugger;throw new AssertionError("Assertion failed (unexpected exception) at current test assertion "+this.#TestAssertions,this,this.#CurrentTest,this.#TestAssertions,null,a)}}Benchmark(a=null,b=null){const c=a?Date.now()-a:null;return null!=c&&(console.log(null==b?"Benchmarked runtime: "+c+"ms":b+": "+c+"ms"),null!=this.#CurrentTest&&(this.#Benchmarks.has(this.#CurrentTest)?this.#Benchmarks.get(this.#CurrentTest).push([b,c]):this.#Benchmarks.set(this.#CurrentTest,[[b,c]]))),Date.now()}Reset(){return this.Assertions=0,this.Tests=0,this.Runtime=null,this.LastError=null,this.TestResults.clear(),this}async RunTests(a=!1){this.Reset();let b,c=null,d=Date.now(),e=!1,f=null;try{for(c of this.TestMethods)c.endsWith("_Test")&&"function"==typeof this[c]&&(console.log("Running test \""+c+"\""),this.Tests++,this.#TestAssertions=0,this.#CurrentTest=c,b=Date.now(),await this[c](),f=Date.now()-b,this.TestResults.set(c,new TestResults(this.#TestAssertions,0,f)),console.log("Test with "+this.#TestAssertions+" assertions in runtime: "+f+"ms"))}catch(d){if(f=Date.now()-b,this.LastError=d,null!=c&&this.TestResults.set(c,new TestResults(this.#TestAssertions,0,f,d)),e=!0,a&&console.groupEnd(),!(d instanceof AssertionError))console.error("Unexpected exception after "+this.#TestAssertions+" assertions (after test runtime "+f+"ms)",d);else if(console.error("Assertion "+this.#TestAssertions+" failed after test runtime "+f+"ms",d),!this._IsTestsFailtest)debugger}finally{this.Runtime=Date.now()-d;const a=this.Tests+" tests with "+this.Assertions+" assertions in total runtime: "+this.Runtime+"ms";e?console.warn(a+" (interrupted by an error)"):console.log(a+" (without any error)")}return this}constructor(){super(),this.#IsTestsFailTest="Tests_Tests_Fail"==this.constructor.name}static async RunAllTests(...a){let b,c,d,e=Date.now(),f=0,g=0,h=0,i=!1,j=new Map,l=null;try{for(b of a){if(console.groupCollapsed("Test of "+("string"==typeof b?b:b.constructor.name)),console.log("Running tests of type \""+("string"==typeof b?b:b.constructor.name)+"\""),f++,!(b instanceof Tests))if(d=new window[b],d instanceof Tests)b=d;else throw new TypeError("Failed to create instance of test type \""+("string"==typeof b?b:b.constructor.name)+"\"");if(j.set(b.constructor.name,b),await b.RunTests(!0),h+=b.Tests,g+=b.Assertions,console.groupEnd(),(console.log("Last type test finished with "+b.Tests+" tests and "+b.Assertions+" assertions in runtime: "+b.Runtime+"ms"),b.LastError)){i=!0;break}}}catch(a){l=a,i=!0,b instanceof Tests?(h+=b.Tests,g+=b.Assertions):console.groupEnd(),console.error(a);debugger}finally{c=Date.now()-e;const a=f+" test types, "+h+" tests and "+g+" assertions in total runtime: "+c+"ms";i?console.warn(a+" (interrupted by an error)"):console.log(a+" (without any error)")}const m=new TestResults(g,h,c,l);let n,o;for([n,o]of j.entries())m.Types.set(n,o);return m}}class AssertionError extends Error{#Type=null;#Test=null;#Assertion=0;#Expected=null;#Current=null;get Type(){return this.#Type}get Test(){return this.#Test}get Assertion(){return this.#Assertion}get Expected(){return this.#Expected}get Current(){return this.#Current}constructor(a,b,c,d,e,f){super(a),this.#Type=b,this.#Test=c,this.#Assertion=d,this.#Expected=e,this.#Current=f}}